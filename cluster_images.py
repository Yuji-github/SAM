import numpy as np
import torch
from img2vec_pytorch import Img2Vec
from PIL import Image
from hdbscan import HDBSCAN
from sklearn.cluster import DBSCAN
from typing import List, Any


class ClusterImages:
    def __init__(
        self, image: np.array, masks: List[dict[str, Any]], model: str = "resnet-18", cluster: str = "hdbscan"
    ):
        """
        :param image: numpy array from main
        :param masks: generated by SAM
        :param model: list of the models
                Resnet
                Alexnet
                Vgg
                Densenet
                efficientnet
                more info: https://github.com/christiansafka/img2vec/tree/master
        :param cluster: list of the clustering model
                dbscan
                hdbscan
        """

        self.image = image
        self.masks = masks
        self.seg_images: list = []
        self.img2vec = Img2Vec(cuda=True if torch.cuda.is_available() else False, model=model)
        self.stored_features: list = []
        self.cluster = cluster

    def _extract_masked_images(self) -> None:
        """Cropping masked area of the image
        :return None:
        """

        for mask in self.masks:
            # mask["segmentation"] is T/F -> [..., None] for RGB (3 dims)
            self.seg_images.append(self.image * mask["segmentation"][..., None])

    def _extract_features_images(self) -> None:
        """Extracting features from image using CV model for clustering
        :return None:
        """

        for img_np_array in self.seg_images:
            img = Image.fromarray(img_np_array)  # convert numpy to PIL format image
            # returned as a torch FloatTensor -> numpy -> 1D (for HDBSCAN) -> append list
            self.stored_features.append(self.img2vec.get_vec(img, tensor=True).numpy().flatten())

    def _clustering_masked_images(self) -> np.array:
        """Clustering with DBSCAN or HDBSCAN
        self.stored_features is 2D array
        :return: ndarray, shape (n_samples, )
            cluster labels
        """
        clustering: np.array = np.array([])

        if self.cluster == "dbscan":
            clustering = DBSCAN(eps=0.5, n_jobs=-1).fit_predict(self.stored_features)
        elif self.cluster == "hdbscan":
            clustering = HDBSCAN(algorithm="best", metric="euclidean").fit_predict(self.stored_features)

        return clustering

    def create_image_cluster(self) -> np.array:
        """Extracting images with masks, extracting features from the masked images, then, cluster the masked images
        :return np.array: labelling
        """
        self._extract_masked_images()
        self._extract_features_images()
        return self._clustering_masked_images()
